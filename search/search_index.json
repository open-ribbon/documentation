{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Open-Ribbon's Vib-Ribbon Technical Database! This documentation is currently under construction, so as a result, many things about it will change over time, whether it be the information provided or the visual and technical aspects of the repository. This info repository was made by the Open-Ribbon server , a server dedicated to decompiling and researching Vib-Ribbon for the Sony PlayStation. Additionally, for full documentation on the documentation engine, MkDocs, visit here . What is Vib-TD? Much like the Discord server it is based from, the Vib-Ribbon Technical Database is what contains most of the information about the game that we currently know of, whether it be related to the game's source code, bugs that have been discovered, oddities, non-game topics, etc. What is Vib-Ribbon? For those who may not be in the loop, Vib-Ribbon is a game created by Masaya Matsuura, following the release of the smash success that was PaRappa the Rapper. It was released on the original PlayStation by his company NanaOn-Sha in Japan on December 9, 1999, and in Europe on August 30, 2000. It would not see an American release until the European ROM was mirrored over to the PlayStation Network to be available globally, during October 2014 after some unexpected hype during an official event. Navigating the Vib-TD [Stuff on how to navigate the documentation. This will be finalized as we add more stuff.]","title":"Index"},{"location":"#what-is-vib-td","text":"Much like the Discord server it is based from, the Vib-Ribbon Technical Database is what contains most of the information about the game that we currently know of, whether it be related to the game's source code, bugs that have been discovered, oddities, non-game topics, etc.","title":"What is Vib-TD?"},{"location":"#what-is-vib-ribbon","text":"For those who may not be in the loop, Vib-Ribbon is a game created by Masaya Matsuura, following the release of the smash success that was PaRappa the Rapper. It was released on the original PlayStation by his company NanaOn-Sha in Japan on December 9, 1999, and in Europe on August 30, 2000. It would not see an American release until the European ROM was mirrored over to the PlayStation Network to be available globally, during October 2014 after some unexpected hype during an official event.","title":"What is Vib-Ribbon?"},{"location":"#navigating-the-vib-td","text":"[Stuff on how to navigate the documentation. This will be finalized as we add more stuff.]","title":"Navigating the Vib-TD"},{"location":"decompilation/_sn_cpp_structors/","text":"_sn_cpp_structors() Within main executables, there exists a method that initializes objects of classes, which is called a constructor. These constructors will be called for object creation. Names for these are not yet finalized as some of them still read \"UnkCtor\" FontHack__Ctor FileSys__Ctor TmdLineObj__Ctor Movie__Ctor InputSys__Ctor UnkCtor00 UnkCtor01 UnkCtor02 UnkCtor03 UnkCtor04 The procedure for getting all of these initialized is to make all the objects needed immediately or at least as soon as possible. The way that vib-ribbon takes care of this is to make an array _CTOR_LIST__ with all of the above constructors. The _sn_cpp_structors() is then run inside start() . void __fastcall _sn_cpp_structors(int sectionobj, int sectionobj_end) { void (**ctor)(void); // Iterate through every entry in the _CTOR_LIST__ array. for ( ctor = (void (**)(void))sectionobj; (int)ctor < sectionobj_end; ++ctor ) { // Run constructor inside its respective class. if ( *ctor ) (*ctor)(); } }","title":"_sn_cpp_structors()"},{"location":"decompilation/_sn_cpp_structors/#_sn_cpp_structors","text":"Within main executables, there exists a method that initializes objects of classes, which is called a constructor. These constructors will be called for object creation. Names for these are not yet finalized as some of them still read \"UnkCtor\" FontHack__Ctor FileSys__Ctor TmdLineObj__Ctor Movie__Ctor InputSys__Ctor UnkCtor00 UnkCtor01 UnkCtor02 UnkCtor03 UnkCtor04 The procedure for getting all of these initialized is to make all the objects needed immediately or at least as soon as possible. The way that vib-ribbon takes care of this is to make an array _CTOR_LIST__ with all of the above constructors. The _sn_cpp_structors() is then run inside start() . void __fastcall _sn_cpp_structors(int sectionobj, int sectionobj_end) { void (**ctor)(void); // Iterate through every entry in the _CTOR_LIST__ array. for ( ctor = (void (**)(void))sectionobj; (int)ctor < sectionobj_end; ++ctor ) { // Run constructor inside its respective class. if ( *ctor ) (*ctor)(); } }","title":"_sn_cpp_structors()"},{"location":"decompilation/file-ext/","text":"File Extraction Written by ILovezCartoonz, aka ILC-YTP Click here to access the original gist This is a guide on how to extract files from Vib-Ribbon. It'll also go over how to repackage files, letting you mod the game. Do note that this guide is based on using Windows, but you should still be able to do everything on Linux with a few adjustments. You'll also need some knowledge on how to navigate CMD/Powershell, or whatever terminal you use. Extracting From BIN/ISO file You'll need: - A copy of Vib-Ribbon on your computer. - A program that can read and extract files from the \"disc.\" Any program that can extract files from a bin or iso file is fine, but if you wanna rebuild the iso/bin file for later, consider using DUMPSXISO, which comes included with MKPSXISO . Run through CMD/Powershell, and remember to add -s whateverfilename.xml to set it up to recompile itself as a bin/iso file later on. EX: dumpsxiso -s rebuild.xml \"Vib-Ribbon (Europe) (En,Fr,De,Es,It) (Track 1).bin\" Extracting PAK files You'll need VibRipper . There's no GUI for the program, it can only be run from a CMD or Powershell window. Basically, when you find a pak file you wanna extract, paste the program into where the pak file is, open a CMD/powershell window, and then enter the command to extract the pak file. EX: vibripper u FILES.PAK FILES_EXT More info can be found on the github page PAL NOTE: The PAL version of the game has a bunch of pak files that are basically the same, only with some models and text changes for the different languages. 01_FILES = Japan Models (TMD) There does exist a Vibri model on the models resource website to download . But, if you don't like how it was compiled, or if you wish to make your own version/rig, or if you wanna mess with animations, continue reading this section. If you're using blender then consider this blender plugin . You can easily port the models in, as well as all the animations and camera angles/animations. It's as accurate as you can get, and what I recommend even if you don't wanna use blender for your purpose, since you can then export the result to whatever you need. Instructions on how to install are listed on the page. If for some reason the addon fails to work correctly, uninstall it, open the zip file and delete the readutil file and replace it with this folder . However, if you insist on not using blender, TMD2LWO and a program that can read LWO (LightWave Objects) files will be needed. Use TMD2LWO the same way as Vib-Ripper was used. EX: TMD2LWO.EXE MODEL.TMD WORM Animations (ANM and ANC) ANM are character/model animation files, while ANC are camera animation files. You can port them through blender with the addon mentioned above. Just make sure you select the whole model before importing the character animations. Images (TIM) !WIP! Trying to figure out a new method for viewing and modifying TIM files. More testing is needed. Try using TIM2VIEW to view the files and possibly replace them. I got IMG2TIM to work before if changing an img back to a TMD, though you might need to specify the VRAM X and Y values. AUDIO (VB and VH) Use PSound (ALT VERSION) . VB files contain all the audio clips. VH has audio header data. Can extract audio, but currently no known way to replace audio. Read more about VAB audio here Rebuilding PAK files When unpacking PAK files, VibRipper will make a text file that'll be needed to make a pak file. EX: vibripper r 01_FILES_EXT 01_FILES.PAK_TOC.txt Make sure to back up the pak file before repacking just in case it doesn't get overwritten and potentially lose progress or waste time trying to get a new one. Making a BIN/ISO file Earlier, I mentioned MKPSXISO, which is what we'll be using to make the bin/iso file. We'll use the xml file DUMPSXISO created earlier. Simply run the program through CMD and specify the xml file. EX: mkpsxiso.exe rebuild.xml You'll get a new bin+cue file named mkpsxiso.bin/.cue. Consider editing the xml file to change the name of the bin+cue file names. Also consider editing the .cue file if you want to include your own custom music tracks in the game. If you have any questions, issues or things to add, feel free to contact me via email: ilovezcartoonz@protonmail.com Alternatively if you wanna take over, clone or fork the gist.","title":"File Extraction"},{"location":"decompilation/file-ext/#file-extraction","text":"Written by ILovezCartoonz, aka ILC-YTP Click here to access the original gist This is a guide on how to extract files from Vib-Ribbon. It'll also go over how to repackage files, letting you mod the game. Do note that this guide is based on using Windows, but you should still be able to do everything on Linux with a few adjustments. You'll also need some knowledge on how to navigate CMD/Powershell, or whatever terminal you use.","title":"File Extraction"},{"location":"decompilation/file-ext/#extracting-from-biniso-file","text":"You'll need: - A copy of Vib-Ribbon on your computer. - A program that can read and extract files from the \"disc.\" Any program that can extract files from a bin or iso file is fine, but if you wanna rebuild the iso/bin file for later, consider using DUMPSXISO, which comes included with MKPSXISO . Run through CMD/Powershell, and remember to add -s whateverfilename.xml to set it up to recompile itself as a bin/iso file later on. EX: dumpsxiso -s rebuild.xml \"Vib-Ribbon (Europe) (En,Fr,De,Es,It) (Track 1).bin\"","title":"Extracting From BIN/ISO file"},{"location":"decompilation/file-ext/#extracting-pak-files","text":"You'll need VibRipper . There's no GUI for the program, it can only be run from a CMD or Powershell window. Basically, when you find a pak file you wanna extract, paste the program into where the pak file is, open a CMD/powershell window, and then enter the command to extract the pak file. EX: vibripper u FILES.PAK FILES_EXT More info can be found on the github page PAL NOTE: The PAL version of the game has a bunch of pak files that are basically the same, only with some models and text changes for the different languages. 01_FILES = Japan","title":"Extracting PAK files"},{"location":"decompilation/file-ext/#models-tmd","text":"There does exist a Vibri model on the models resource website to download . But, if you don't like how it was compiled, or if you wish to make your own version/rig, or if you wanna mess with animations, continue reading this section. If you're using blender then consider this blender plugin . You can easily port the models in, as well as all the animations and camera angles/animations. It's as accurate as you can get, and what I recommend even if you don't wanna use blender for your purpose, since you can then export the result to whatever you need. Instructions on how to install are listed on the page. If for some reason the addon fails to work correctly, uninstall it, open the zip file and delete the readutil file and replace it with this folder . However, if you insist on not using blender, TMD2LWO and a program that can read LWO (LightWave Objects) files will be needed. Use TMD2LWO the same way as Vib-Ripper was used. EX: TMD2LWO.EXE MODEL.TMD WORM","title":"Models (TMD)"},{"location":"decompilation/file-ext/#animations-anm-and-anc","text":"ANM are character/model animation files, while ANC are camera animation files. You can port them through blender with the addon mentioned above. Just make sure you select the whole model before importing the character animations.","title":"Animations (ANM and ANC)"},{"location":"decompilation/file-ext/#images-tim-wip","text":"Trying to figure out a new method for viewing and modifying TIM files. More testing is needed. Try using TIM2VIEW to view the files and possibly replace them. I got IMG2TIM to work before if changing an img back to a TMD, though you might need to specify the VRAM X and Y values.","title":"Images (TIM) !WIP!"},{"location":"decompilation/file-ext/#audio-vb-and-vh","text":"Use PSound (ALT VERSION) . VB files contain all the audio clips. VH has audio header data. Can extract audio, but currently no known way to replace audio. Read more about VAB audio here","title":"AUDIO (VB and VH)"},{"location":"decompilation/file-ext/#rebuilding-pak-files","text":"When unpacking PAK files, VibRipper will make a text file that'll be needed to make a pak file. EX: vibripper r 01_FILES_EXT 01_FILES.PAK_TOC.txt Make sure to back up the pak file before repacking just in case it doesn't get overwritten and potentially lose progress or waste time trying to get a new one.","title":"Rebuilding PAK files"},{"location":"decompilation/file-ext/#making-a-biniso-file","text":"Earlier, I mentioned MKPSXISO, which is what we'll be using to make the bin/iso file. We'll use the xml file DUMPSXISO created earlier. Simply run the program through CMD and specify the xml file. EX: mkpsxiso.exe rebuild.xml You'll get a new bin+cue file named mkpsxiso.bin/.cue. Consider editing the xml file to change the name of the bin+cue file names. Also consider editing the .cue file if you want to include your own custom music tracks in the game. If you have any questions, issues or things to add, feel free to contact me via email: ilovezcartoonz@protonmail.com Alternatively if you wanna take over, clone or fork the gist.","title":"Making a BIN/ISO file"},{"location":"decompilation/resources/","text":"Resources and Setup How to decompile If you want to help us research the game, and even reverse engineer, you will need the following things: Basic C and C++ knowledge A disassembler (IDA Pro or Ghidra is recommended) Instructions for Ghidra You will need Ghidra 10.3.1 specifically, as any other version is either confirmed or speculated not to work. A plugin is also needed to read PSX binaries, which can be found here . After you have extracted the archive, open Ghidra, navigate to File -> Install Extensions in the main menu, and install the extension. Instructions for IDA Pro (WIP) Obtain the IDB file Install the psyq plugin Ignore \"psyq450: dir not found\" error How to extract PAK files You will need a tool called VibRipper, which can be found in this GitHub repository , courtesy of Resistiv. To use this tool, the executable will need to be placed in the same folder or directory as the PAK file you want to extract. After this, run the extract command, ./VibRipper.exe u 01_FILES.PAK EXTRACTED_FILES for example. (Append mono to the beginning in the case of Linux.) In this case, all the extracted files should be in EXTRACTED_FILES. If you wish to edit the files that you extracted, follow the other sections on this page accordingly. How to edit TMDs, ANMs, and ANCs There are two currently known methods to edit models and animations. One uses Blender and the other uses LightWave. Blender Instructions If you want to export the animations on Blender, you can use a tool created by Murugo , who created a custom addon that can work with Vib-Ribbon's animation and model files; however the plugin was designed for Blender 2.8.x and as such will only work in that version range alone. For further instructions, visit the repository for the plugin . LightWave Instructions (WIP) It was discovered that LightWave was the tool used to create the original files, so naturally, there are methods to work with the models and animations here as well. You can get LightWave at this link . How to edit Audio files There is not a currently known way to edit the audio of Vib-Ribbon, but there will likely be one eventually. Looking at different SDKs will likely have some answers. Extracting the audios This is a simple process, and requires the use of PSound. You can download PSound by following this link. . Browse the folders with audio such as GAME/AUDIO/PSJ_SE.VB , KIOSK/AUDIO/PSJ_SE.VB , or TITLE/AUDIO/PSJ_SE.VB . Each piece of audio tends to be played at different speeds because sample rates vary across them. To export, you can convert them as WAV in the File Tab. How to edit obstacle data This one is still in the works... You can help us out by analyzing the SCRIPT/SYSTEM3.FSL file! After extraction, of course.","title":"Resources and Setup"},{"location":"decompilation/resources/#resources-and-setup","text":"","title":"Resources and Setup"},{"location":"decompilation/resources/#how-to-decompile","text":"If you want to help us research the game, and even reverse engineer, you will need the following things: Basic C and C++ knowledge A disassembler (IDA Pro or Ghidra is recommended)","title":"How to decompile"},{"location":"decompilation/resources/#instructions-for-ghidra","text":"You will need Ghidra 10.3.1 specifically, as any other version is either confirmed or speculated not to work. A plugin is also needed to read PSX binaries, which can be found here . After you have extracted the archive, open Ghidra, navigate to File -> Install Extensions in the main menu, and install the extension.","title":"Instructions for Ghidra"},{"location":"decompilation/resources/#instructions-for-ida-pro","text":"(WIP) Obtain the IDB file Install the psyq plugin Ignore \"psyq450: dir not found\" error","title":"Instructions for IDA Pro"},{"location":"decompilation/resources/#how-to-extract-pak-files","text":"You will need a tool called VibRipper, which can be found in this GitHub repository , courtesy of Resistiv. To use this tool, the executable will need to be placed in the same folder or directory as the PAK file you want to extract. After this, run the extract command, ./VibRipper.exe u 01_FILES.PAK EXTRACTED_FILES for example. (Append mono to the beginning in the case of Linux.) In this case, all the extracted files should be in EXTRACTED_FILES. If you wish to edit the files that you extracted, follow the other sections on this page accordingly.","title":"How to extract PAK files"},{"location":"decompilation/resources/#how-to-edit-tmds-anms-and-ancs","text":"There are two currently known methods to edit models and animations. One uses Blender and the other uses LightWave.","title":"How to edit TMDs, ANMs, and ANCs"},{"location":"decompilation/resources/#blender-instructions","text":"If you want to export the animations on Blender, you can use a tool created by Murugo , who created a custom addon that can work with Vib-Ribbon's animation and model files; however the plugin was designed for Blender 2.8.x and as such will only work in that version range alone. For further instructions, visit the repository for the plugin .","title":"Blender Instructions"},{"location":"decompilation/resources/#lightwave-instructions","text":"(WIP) It was discovered that LightWave was the tool used to create the original files, so naturally, there are methods to work with the models and animations here as well. You can get LightWave at this link .","title":"LightWave Instructions"},{"location":"decompilation/resources/#how-to-edit-audio-files","text":"There is not a currently known way to edit the audio of Vib-Ribbon, but there will likely be one eventually. Looking at different SDKs will likely have some answers.","title":"How to edit Audio files"},{"location":"decompilation/resources/#extracting-the-audios","text":"This is a simple process, and requires the use of PSound. You can download PSound by following this link. . Browse the folders with audio such as GAME/AUDIO/PSJ_SE.VB , KIOSK/AUDIO/PSJ_SE.VB , or TITLE/AUDIO/PSJ_SE.VB . Each piece of audio tends to be played at different speeds because sample rates vary across them. To export, you can convert them as WAV in the File Tab.","title":"Extracting the audios"},{"location":"decompilation/resources/#how-to-edit-obstacle-data","text":"This one is still in the works... You can help us out by analyzing the SCRIPT/SYSTEM3.FSL file! After extraction, of course.","title":"How to edit obstacle data"},{"location":"decompilation/main_t/globals/","text":"Here are some of the globals found in MAIN_T.EXE, the title executable. These globals are saved as 4-byte DWORDS, usually as either values or pointers to game functions, in the console's memory during execution. PAL None yet.","title":"Globals"},{"location":"decompilation/main_t/globals/#pal","text":"None yet.","title":"PAL"},{"location":"file-types/anc/","text":"","title":"ANC - Camera Animation"},{"location":"file-types/anm/","text":"","title":"ANM - Model Animation"},{"location":"file-types/fsl/","text":"","title":"FSL - Obstacle Course Data"},{"location":"file-types/intro/","text":"","title":"Introduction to File Types"},{"location":"file-types/pak/","text":"","title":"PAK - Vib-Ribbon Archive"},{"location":"file-types/tim/","text":"","title":"TIM - PlayStation Image"},{"location":"file-types/tmd/","text":".flex-container { display: flex; flex-wrap: nowrap; } TMD - PlayStation Model Like every three-dimensional object in a video game, a character such as Vibri, would need a 3d model in order to convey what the player is doing. Despite previous confusion within the confines of the Vib-Ribbon community, this is no exception for Vibri. The format in which Vib-Ribbon uses for its models is the TMD format, which is useful for keeping filesize down in order to integrate Vib-Ribbon into the RAM of the Playstation. These files tend to be small to the point where multiple tens, or maybe even a couple hundred could theoretically fit inside the base 2 megabytes of system memory on the PlayStation. Vib-Ribbon makes use of these model files rather extensively compared other games due to the visual style of the game. From characters, to the ribbon itself, to even the font that the game uses, everything that is a vector traces back to one of these models. However, if imported straight into a program, such as Blender, you\u2019ll only get pieces of a model that aren\u2019t put together. It\u2019s up to the ANM files to put them together. And because of the fact that the objects that make up each file are polylines, as opposed to polygons, they may render as invisible or otherwise incorrect or strange unless the user turns on some sort of wireframe mode. File Makeup Header Object Table Primitives Vertices Normals The short rundown of what each of the parts of the file do. The header indicates the version of the TMD, any flags that the TMD needs to set and the number of objects in the file. The object table, you guessed it, lists the pointers to all the objects. Primitives are arrangments of drawing packets, being: polygons, lines, and sprites. Vertices, obviously, are the points for all the objects. Normals help with shading, which is completely irrelevant for vib-ribbon. TMD Applications Fonts As stated before, all vector objects are loaded from TMD files, including the font files. The PAL version of the game uses one of two main font files depending on what the language is set to from the menu. An oddity that can be seen is that all of the Japanese files, including the katakana font, is still in the European version, inside 01_FILES , but are left only used in the Japanese release. Each FONT folder contains two TMDs, FE_FONT.TMD ( 01_FONT.TMD for Japanese) and MARK.TMD . The actual symbols used to make sentences are made from FE_FONT.TMD , whereas MARK.TMD contains shape-represenations for scoring. One thing to note is that the numbers saved in 01_FONT.TMD are wider than they are in FE_FONT.TMD , probably because of the katakana also written in the Japanese file. MARK.TMD FE_FONT.TMD 01_FONT.TMD Vibri There are two variants of Vibri's rabbit form inside of the games files. These two files only contain Vibri\u2019s rabbit form, as her other forms are located in other files. One of them is located in TITLE\\FILES\\MOVIE\\TITLE , which is a 8120-byte file named VIBRI.TMD . It is used for the title screen, menus, and the tutorial. Essentially, any non-game setting may use this model rather than the other. A major difference to be known from the other models is that this one is not meant to be looked at from all directions, as this model takes a slightly more \"two-dimensional\" approach. However, taking the camera to a different position reveals a few things about Vibri that suggest that the third dimension was used to help make certain details. Certain angles are still applied to some of the limbs of Vibri. In the example gif for example, you can notice how her feet and her arms are tilted, which is usually not though about when rendered into the game. Her torso is also a full cone-like structure rather than a plane like the rest of the model's objects. Perhaps the most noticable, her eyes also pertrude from the rest of the face, likely as either a way to make them appear thinner than they really are, or to make them scale more naturally when turning. A final thing you may notice is the triangle that appears on her head. This might have been used as a way to help center the head during the animating process. This triangle of course, does not show up in the actual game. The other Vibri rabbit model is titled MODEL.TMD , located in GAME\\FILES\\CHARA\\PEELOO is used for the rest of the game and is a 8528-byte file. During gameplay, the game also loads her other forms from the FROG , SNAKE , and SUPER folders, also located in GAME\\FILES\\CHARA , all of which also called MODEL.TMD . The folders also contain all the ANM files for the respective forms, as they of course, cannot share the same ones. In all of the models for Vibri, the eyes are only visible from one side because the PlayStation is able to hide any object from the backside.","title":"TMD - PlayStation Model"},{"location":"file-types/tmd/#tmd-playstation-model","text":"Like every three-dimensional object in a video game, a character such as Vibri, would need a 3d model in order to convey what the player is doing. Despite previous confusion within the confines of the Vib-Ribbon community, this is no exception for Vibri. The format in which Vib-Ribbon uses for its models is the TMD format, which is useful for keeping filesize down in order to integrate Vib-Ribbon into the RAM of the Playstation. These files tend to be small to the point where multiple tens, or maybe even a couple hundred could theoretically fit inside the base 2 megabytes of system memory on the PlayStation. Vib-Ribbon makes use of these model files rather extensively compared other games due to the visual style of the game. From characters, to the ribbon itself, to even the font that the game uses, everything that is a vector traces back to one of these models. However, if imported straight into a program, such as Blender, you\u2019ll only get pieces of a model that aren\u2019t put together. It\u2019s up to the ANM files to put them together. And because of the fact that the objects that make up each file are polylines, as opposed to polygons, they may render as invisible or otherwise incorrect or strange unless the user turns on some sort of wireframe mode.","title":"TMD - PlayStation Model"},{"location":"file-types/tmd/#file-makeup","text":"Header Object Table Primitives Vertices Normals The short rundown of what each of the parts of the file do. The header indicates the version of the TMD, any flags that the TMD needs to set and the number of objects in the file. The object table, you guessed it, lists the pointers to all the objects. Primitives are arrangments of drawing packets, being: polygons, lines, and sprites. Vertices, obviously, are the points for all the objects. Normals help with shading, which is completely irrelevant for vib-ribbon.","title":"File Makeup"},{"location":"file-types/tmd/#tmd-applications","text":"","title":"TMD Applications"},{"location":"file-types/tmd/#fonts","text":"As stated before, all vector objects are loaded from TMD files, including the font files. The PAL version of the game uses one of two main font files depending on what the language is set to from the menu. An oddity that can be seen is that all of the Japanese files, including the katakana font, is still in the European version, inside 01_FILES , but are left only used in the Japanese release. Each FONT folder contains two TMDs, FE_FONT.TMD ( 01_FONT.TMD for Japanese) and MARK.TMD . The actual symbols used to make sentences are made from FE_FONT.TMD , whereas MARK.TMD contains shape-represenations for scoring. One thing to note is that the numbers saved in 01_FONT.TMD are wider than they are in FE_FONT.TMD , probably because of the katakana also written in the Japanese file. MARK.TMD FE_FONT.TMD 01_FONT.TMD","title":"Fonts"},{"location":"file-types/tmd/#vibri","text":"There are two variants of Vibri's rabbit form inside of the games files. These two files only contain Vibri\u2019s rabbit form, as her other forms are located in other files. One of them is located in TITLE\\FILES\\MOVIE\\TITLE , which is a 8120-byte file named VIBRI.TMD . It is used for the title screen, menus, and the tutorial. Essentially, any non-game setting may use this model rather than the other. A major difference to be known from the other models is that this one is not meant to be looked at from all directions, as this model takes a slightly more \"two-dimensional\" approach. However, taking the camera to a different position reveals a few things about Vibri that suggest that the third dimension was used to help make certain details. Certain angles are still applied to some of the limbs of Vibri. In the example gif for example, you can notice how her feet and her arms are tilted, which is usually not though about when rendered into the game. Her torso is also a full cone-like structure rather than a plane like the rest of the model's objects. Perhaps the most noticable, her eyes also pertrude from the rest of the face, likely as either a way to make them appear thinner than they really are, or to make them scale more naturally when turning. A final thing you may notice is the triangle that appears on her head. This might have been used as a way to help center the head during the animating process. This triangle of course, does not show up in the actual game. The other Vibri rabbit model is titled MODEL.TMD , located in GAME\\FILES\\CHARA\\PEELOO is used for the rest of the game and is a 8528-byte file. During gameplay, the game also loads her other forms from the FROG , SNAKE , and SUPER folders, also located in GAME\\FILES\\CHARA , all of which also called MODEL.TMD . The folders also contain all the ANM files for the respective forms, as they of course, cannot share the same ones. In all of the models for Vibri, the eyes are only visible from one side because the PlayStation is able to hide any object from the backside.","title":"Vibri"},{"location":"file-types/vb-vh/","text":"","title":"VB/VH - PlayStation Audio"}]}